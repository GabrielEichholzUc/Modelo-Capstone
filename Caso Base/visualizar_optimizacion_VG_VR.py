"""
Visualizador de Resultados de Optimizaci√≥n - Caso Base con VG/VR por Tramos
==========================================================================

Este script visualiza los resultados generados por optimizar_caso_base.py,
incluyendo an√°lisis espec√≠ficos de los vol√∫menes VG/VR calculados usando
las reglas por tramos implementadas.

Gr√°ficos generados:
1. Evoluci√≥n de vol√∫menes del lago con an√°lisis VG/VR
2. Comparaci√≥n de vol√∫menes por uso vs. l√≠mites calculados por tramos
3. An√°lisis de extracciones vs. vol√∫menes disponibles
4. Distribuci√≥n de generaci√≥n con restricciones VG
5. An√°lisis de d√©ficits de riego vs. vol√∫menes VR disponibles
6. Rendimiento del sistema bajo las nuevas reglas por tramos
"""

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import os
from datetime import datetime
from preprocesar_volumenes_uso import calcular_VG_VR_por_tramos
from cargar_datos_5temporadas import cargar_parametros_excel, cargar_nombres_centrales

# Configuraci√≥n de estilo
plt.style.use('seaborn-v0_8-darkgrid')
plt.rcParams['figure.figsize'] = (16, 10)
plt.rcParams['font.size'] = 10
plt.rcParams['axes.titlesize'] = 12
plt.rcParams['axes.labelsize'] = 11
plt.rcParams['legend.fontsize'] = 10

# Colores consistentes
COLORS = {
    'VG': '#e74c3c',      # Rojo para generaci√≥n
    'VR': '#3498db',      # Azul para riego
    'total': '#2ecc71',   # Verde para total
    'limite': '#f39c12',  # Naranja para l√≠mites
    'deficit': '#e67e22', # Naranja oscuro para d√©ficits
    'volumen': '#9b59b6', # P√∫rpura para vol√∫menes lago
    'meta': '#34495e'     # Gris para metas/umbrales
}

def verificar_carpeta_resultados(carpeta="resultados_caso_base"):
    """
    Verifica que existan los archivos de resultados necesarios
    """
    archivos_necesarios = [
        "volumenes_lago.csv",
        "volumenes_por_uso.csv", 
        "extracciones_por_uso.csv",
        "riego.csv",
        "energia_total.csv",
        "generacion.csv"
    ]
    
    archivos_encontrados = []
    archivos_faltantes = []
    
    for archivo in archivos_necesarios:
        ruta_archivo = os.path.join(carpeta, archivo)
        if os.path.exists(ruta_archivo):
            archivos_encontrados.append(archivo)
        else:
            archivos_faltantes.append(archivo)
    
    return archivos_encontrados, archivos_faltantes

def cargar_datos_resultados(carpeta="resultados_caso_base"):
    """
    Carga todos los archivos de resultados en un diccionario
    """
    print(f"\nüìÇ Cargando resultados desde: {carpeta}/")
    
    # Verificar archivos
    encontrados, faltantes = verificar_carpeta_resultados(carpeta)
    
    if faltantes:
        print(f"‚ö†Ô∏è  Archivos faltantes: {faltantes}")
        print("   Ejecuta primero: python optimizar_caso_base.py")
        return None
    
    # Cargar datos
    datos = {}
    try:
        datos['volumenes_lago'] = pd.read_csv(f"{carpeta}/volumenes_lago.csv")
        datos['volumenes_uso'] = pd.read_csv(f"{carpeta}/volumenes_por_uso.csv")
        datos['extracciones_uso'] = pd.read_csv(f"{carpeta}/extracciones_por_uso.csv")
        datos['riego'] = pd.read_csv(f"{carpeta}/riego.csv")
        datos['energia'] = pd.read_csv(f"{carpeta}/energia_total.csv")
        datos['generacion'] = pd.read_csv(f"{carpeta}/generacion.csv")
        
        # Archivos opcionales
        if os.path.exists(f"{carpeta}/holguras_volumen.csv"):
            datos['holguras'] = pd.read_csv(f"{carpeta}/holguras_volumen.csv")
        else:
            datos['holguras'] = pd.DataFrame()  # Vac√≠o si no hay violaciones
            
        if os.path.exists(f"{carpeta}/decision_alpha.csv"):
            datos['alpha'] = pd.read_csv(f"{carpeta}/decision_alpha.csv")
        else:
            datos['alpha'] = pd.DataFrame()
        
        print(f"‚úÖ {len(encontrados)} archivos cargados exitosamente")
        
        # Mostrar estad√≠sticas b√°sicas
        print(f"   ‚Ä¢ Vol√∫menes lago: {len(datos['volumenes_lago'])} registros")
        print(f"   ‚Ä¢ Vol√∫menes por uso: {len(datos['volumenes_uso'])} registros") 
        print(f"   ‚Ä¢ Extracciones: {len(datos['extracciones_uso'])} registros")
        print(f"   ‚Ä¢ Datos de riego: {len(datos['riego'])} registros")
        print(f"   ‚Ä¢ Energ√≠a generada: {len(datos['energia'])} registros")
        
        return datos
        
    except Exception as e:
        print(f"‚ùå Error cargando datos: {e}")
        return None

def calcular_limites_VG_VR_optimizacion(datos_volumenes, parametros):
    """
    Calcula los l√≠mites VG/VR por tramos para cada semana usando los vol√∫menes 
    de la optimizaci√≥n y los par√°metros del modelo
    """
    print("\nüîç Calculando l√≠mites VG/VR por tramos para resultados de optimizaci√≥n...")
    
    # Obtener par√°metros especiales (pueden venir de configuraci√≥n)
    V_mixto = parametros.get('V_mixto', 0.0)
    T_TRANS = parametros.get('T_TRANS', 0) 
    VG_INI = parametros.get('VG_INI', 800.0)
    VR_INI = parametros.get('VR_INI', 1200.0)
    
    limites_calculados = []
    
    # Agrupar por temporada para c√°lculos secuenciales
    for t in sorted(datos_volumenes['Temporada'].unique()):
        datos_temp = datos_volumenes[datos_volumenes['Temporada'] == t].copy()
        datos_temp = datos_temp.sort_values('Semana')
        
        # Volumen inicial de la temporada (primera semana)
        V_rini_k = datos_temp['Volumen_hm3'].iloc[0]
        
        # Valores previos si existen
        if t > 1:
            # Buscar temporada anterior
            datos_prev = datos_volumenes[datos_volumenes['Temporada'] == t-1]
            if len(datos_prev) > 0:
                V_rini_k_minus1 = datos_prev['Volumen_hm3'].iloc[0]
                # Buscar VG previo (simplificado: usar l√≠mite calculado anterior)
                VG_prev = 800.0  # Simplificaci√≥n, podr√≠a mejorarse
            else:
                V_rini_k_minus1 = None
                VG_prev = None
        else:
            V_rini_k_minus1 = None 
            VG_prev = None
        
        # Calcular l√≠mites para esta temporada
        VG_limite, VR_limite = calcular_VG_VR_por_tramos(
            V_rini_k=V_rini_k,
            V_rini_k_minus1=V_rini_k_minus1, 
            V_mixto=V_mixto,
            t=t,
            T_TRANS=T_TRANS,
            k=t,
            VG_prev=VG_prev,
            VG_INI=VG_INI if t == 1 else None,
            VR_INI=VR_INI if t == 1 else None
        )
        
        # Si devuelve None (caso k=1), usar valores iniciales
        if VG_limite is None:
            VG_limite = VG_INI if t == 1 else 0
        if VR_limite is None:
            VR_limite = VR_INI if t == 1 else 0
        
        # Agregar l√≠mites a todas las semanas de esta temporada
        for _, row in datos_temp.iterrows():
            limites_calculados.append({
                'Semana': row['Semana'],
                'Temporada': row['Temporada'],
                'Volumen_hm3': row['Volumen_hm3'],
                'V_rini_k': V_rini_k,
                'VG_limite': VG_limite,
                'VR_limite': VR_limite,
                'Total_limite': VG_limite + VR_limite
            })
    
    df_limites = pd.DataFrame(limites_calculados)
    print(f"   ‚úÖ L√≠mites calculados para {len(df_limites)} semanas")
    
    return df_limites

def crear_visualizador_optimizacion(carpeta_resultados="resultados_caso_base", 
                                   carpeta_graficos="graficos_optimizacion_VG_VR"):
    """
    Funci√≥n principal para crear visualizaciones de los resultados de optimizaci√≥n
    """
    
    print("="*80)
    print("VISUALIZADOR DE RESULTADOS - OPTIMIZACI√ìN CON VG/VR POR TRAMOS")
    print("="*80)
    
    # Crear carpeta de salida
    os.makedirs(carpeta_graficos, exist_ok=True)
    
    # 1. Cargar datos
    datos = cargar_datos_resultados(carpeta_resultados)
    if datos is None:
        return
    
    # 2. Cargar par√°metros del modelo
    try:
        parametros = cargar_parametros_excel()
        nombres_centrales = cargar_nombres_centrales()
        print("‚úÖ Par√°metros del modelo cargados")
    except Exception as e:
        print(f"‚ö†Ô∏è  Error cargando par√°metros: {e}")
        parametros = {}
        nombres_centrales = {}
    
    # 3. Calcular l√≠mites VG/VR por tramos
    df_limites = calcular_limites_VG_VR_optimizacion(datos['volumenes_lago'], parametros)
    
    # =============================================================
    # GR√ÅFICO 1: VOL√öMENES DEL LAGO CON L√çMITES VG/VR
    # =============================================================
    
    print("\nüìà Generando Gr√°fico 1: Vol√∫menes del lago con an√°lisis VG/VR...")
    
    fig, axes = plt.subplots(3, 1, figsize=(18, 15))
    
    # Preparar datos con offset para mostrar temporadas juntas
    datos_plot = datos['volumenes_lago'].copy()
    datos_plot['Semana_Global'] = (datos_plot['Temporada'] - 1) * 48 + datos_plot['Semana']
    
    limites_plot = df_limites.copy()
    limites_plot['Semana_Global'] = (limites_plot['Temporada'] - 1) * 48 + limites_plot['Semana']
    
    # Gr√°fico 1.1: Volumen del lago
    ax = axes[0]
    ax.plot(datos_plot['Semana_Global'], datos_plot['Volumen_hm3'], 
            color=COLORS['volumen'], linewidth=2.5, label='Volumen del Lago')
    
    # L√≠neas de referencia
    V_min = parametros.get('V_min', 1400)
    V_MAX = parametros.get('V_MAX', 5600)
    ax.axhline(y=V_min, color='red', linestyle='--', alpha=0.7, label=f'V_min = {V_min} hm¬≥')
    ax.axhline(y=V_MAX, color='orange', linestyle='--', alpha=0.7, label=f'V_MAX = {V_MAX} hm¬≥')
    
    # Separadores de temporadas
    for t in range(1, 5):
        ax.axvline(x=t*48, color='gray', linestyle='-', alpha=0.3, linewidth=1)
    
    ax.set_title('Evoluci√≥n del Volumen del Lago Laja - Optimizaci√≥n', fontweight='bold', fontsize=14)
    ax.set_ylabel('Volumen (hm¬≥)')
    ax.legend()
    ax.grid(True, alpha=0.3)
    
    # Gr√°fico 1.2: L√≠mites VG y VR calculados por tramos
    ax = axes[1]
    ax.plot(limites_plot['Semana_Global'], limites_plot['VG_limite'], 
            color=COLORS['VG'], linewidth=2.5, label='L√≠mite VG (Generaci√≥n)', marker='o', markersize=3)
    ax.plot(limites_plot['Semana_Global'], limites_plot['VR_limite'], 
            color=COLORS['VR'], linewidth=2.5, label='L√≠mite VR (Riego)', marker='s', markersize=3)
    ax.plot(limites_plot['Semana_Global'], limites_plot['Total_limite'], 
            color=COLORS['total'], linewidth=2, label='Total Extra√≠ble (VG+VR)', linestyle='--')
    
    # L√≠mite VG = 1200
    ax.axhline(y=1200, color='red', linestyle='-', alpha=0.8, label='L√≠mite VG = 1200 hm¬≥')
    
    # Separadores de temporadas
    for t in range(1, 5):
        ax.axvline(x=t*48, color='gray', linestyle='-', alpha=0.3, linewidth=1)
    
    ax.set_title('L√≠mites VG/VR Calculados por Tramos', fontweight='bold', fontsize=14)
    ax.set_ylabel('Volumen L√≠mite (hm¬≥)')
    ax.legend()
    ax.grid(True, alpha=0.3)
    
    # Gr√°fico 1.3: Vol√∫menes por uso utilizados en optimizaci√≥n
    ax = axes[2]
    
    # Procesar datos de vol√∫menes por uso
    vol_uso = datos['volumenes_uso'].copy()
    vol_uso['Semana_Global'] = (vol_uso['Temporada'] - 1) * 48 + vol_uso['Semana']
    
    # Separar por uso
    vol_generacion = vol_uso[vol_uso['Uso'] == 2]  # u=2 es generaci√≥n
    vol_riego = vol_uso[vol_uso['Uso'] == 1]       # u=1 es riego
    
    if len(vol_generacion) > 0:
        ax.plot(vol_generacion['Semana_Global'], vol_generacion['Volumen_hm3'], 
                color=COLORS['VG'], linewidth=2, label='Volumen Usado - Generaci√≥n', alpha=0.8)
    
    if len(vol_riego) > 0:
        ax.plot(vol_riego['Semana_Global'], vol_riego['Volumen_hm3'], 
                color=COLORS['VR'], linewidth=2, label='Volumen Usado - Riego', alpha=0.8)
    
    # Separadores de temporadas
    for t in range(1, 5):
        ax.axvline(x=t*48, color='gray', linestyle='-', alpha=0.3, linewidth=1)
    
    ax.set_title('Vol√∫menes por Uso Utilizados en la Optimizaci√≥n', fontweight='bold', fontsize=14)
    ax.set_xlabel('Semana Global')
    ax.set_ylabel('Volumen Utilizado (hm¬≥)')
    ax.legend()
    ax.grid(True, alpha=0.3)
    
    # Configurar ejes x para todos los subplots
    for ax in axes:
        ax.set_xticks([24, 72, 120, 168, 216])
        ax.set_xticklabels(['T1', 'T2', 'T3', 'T4', 'T5'], fontweight='bold')
        ax.set_xlim(0, 240)
    
    plt.tight_layout()
    plt.savefig(f'{carpeta_graficos}/1_volumenes_lago_VG_VR.png', dpi=300, bbox_inches='tight')
    print(f"  ‚úÖ Guardado: {carpeta_graficos}/1_volumenes_lago_VG_VR.png")
    plt.close()
    
    # =============================================================
    # GR√ÅFICO 2: AN√ÅLISIS DE EXTRACCIONES VS L√çMITES
    # =============================================================
    
    print("üìà Generando Gr√°fico 2: An√°lisis extracciones vs l√≠mites...")
    
    fig, axes = plt.subplots(2, 2, figsize=(18, 12))
    axes = axes.flatten()
    
    # Preparar datos de extracciones
    extracciones = datos['extracciones_uso'].copy()
    extracciones['Semana_Global'] = (extracciones['Temporada'] - 1) * 48 + extracciones['Semana']
    
    # Merge con l√≠mites
    merged_data = pd.merge(extracciones, limites_plot, on=['Semana', 'Temporada'], how='left')
    
    # Gr√°fico 2.1: Extracciones vs L√≠mites VG
    ax = axes[0]
    ext_gen = merged_data[merged_data['Uso'] == 2]  # Generaci√≥n
    if len(ext_gen) > 0:
        ax.scatter(ext_gen['VG_limite'], ext_gen['Caudal_m3s'], 
                  color=COLORS['VG'], alpha=0.6, s=30, label='Extracciones Generaci√≥n')
        
        # L√≠nea de referencia (y=x)
        max_val = max(ext_gen['VG_limite'].max(), ext_gen['Caudal_m3s'].max())
        ax.plot([0, max_val], [0, max_val], '--', color='gray', alpha=0.5, label='L√≠mite = Extracci√≥n')
    
    ax.set_title('Extracciones vs L√≠mites VG (Generaci√≥n)', fontweight='bold')
    ax.set_xlabel('L√≠mite VG (hm¬≥)')
    ax.set_ylabel('Extracci√≥n Generaci√≥n (m¬≥/s)')
    ax.legend()
    ax.grid(True, alpha=0.3)
    
    # Gr√°fico 2.2: Extracciones vs L√≠mites VR  
    ax = axes[1]
    ext_riego = merged_data[merged_data['Uso'] == 1]  # Riego
    if len(ext_riego) > 0:
        ax.scatter(ext_riego['VR_limite'], ext_riego['Caudal_m3s'], 
                  color=COLORS['VR'], alpha=0.6, s=30, label='Extracciones Riego')
        
        # L√≠nea de referencia
        max_val = max(ext_riego['VR_limite'].max(), ext_riego['Caudal_m3s'].max())
        ax.plot([0, max_val], [0, max_val], '--', color='gray', alpha=0.5, label='L√≠mite = Extracci√≥n')
    
    ax.set_title('Extracciones vs L√≠mites VR (Riego)', fontweight='bold')
    ax.set_xlabel('L√≠mite VR (hm¬≥)')
    ax.set_ylabel('Extracci√≥n Riego (m¬≥/s)')
    ax.legend()
    ax.grid(True, alpha=0.3)
    
    # Gr√°fico 2.3: Evoluci√≥n temporal de extracciones
    ax = axes[2]
    if len(ext_gen) > 0:
        ax.plot(ext_gen['Semana_Global_x'], ext_gen['Caudal_m3s'], 
               color=COLORS['VG'], linewidth=2, label='Extracci√≥n Generaci√≥n')
    if len(ext_riego) > 0:
        ax.plot(ext_riego['Semana_Global_x'], ext_riego['Caudal_m3s'], 
               color=COLORS['VR'], linewidth=2, label='Extracci√≥n Riego')
    
    # Separadores de temporadas
    for t in range(1, 5):
        ax.axvline(x=t*48, color='gray', linestyle='-', alpha=0.3, linewidth=1)
    
    ax.set_title('Evoluci√≥n Temporal de Extracciones', fontweight='bold')
    ax.set_xlabel('Semana Global')
    ax.set_ylabel('Extracci√≥n (m¬≥/s)')
    ax.legend()
    ax.grid(True, alpha=0.3)
    ax.set_xticks([24, 72, 120, 168, 216])
    ax.set_xticklabels(['T1', 'T2', 'T3', 'T4', 'T5'])
    
    # Gr√°fico 2.4: Utilizaci√≥n de l√≠mites (%)
    ax = axes[3]
    
    # Calcular porcentaje de utilizaci√≥n
    if len(ext_gen) > 0 and len(ext_riego) > 0:
        # Simplificado: asumir conversi√≥n aproximada m¬≥/s a hm¬≥ por semana
        factor_conversion = 0.6048  # (7 d√≠as * 24 h * 3600 s) / 1e6
        
        ext_gen_conv = ext_gen['Caudal_m3s'] * factor_conversion
        ext_riego_conv = ext_riego['Caudal_m3s'] * factor_conversion
        
        util_gen = (ext_gen_conv / ext_gen['VG_limite'] * 100).fillna(0)
        util_riego = (ext_riego_conv / ext_riego['VR_limite'] * 100).fillna(0)
        
        ax.plot(ext_gen['Semana_Global_x'], util_gen, 
               color=COLORS['VG'], linewidth=2, label='Utilizaci√≥n VG (%)', marker='o', markersize=3)
        ax.plot(ext_riego['Semana_Global_x'], util_riego, 
               color=COLORS['VR'], linewidth=2, label='Utilizaci√≥n VR (%)', marker='s', markersize=3)
        
        ax.axhline(y=100, color='red', linestyle='--', alpha=0.7, label='100% Utilizaci√≥n')
    
    # Separadores de temporadas
    for t in range(1, 5):
        ax.axvline(x=t*48, color='gray', linestyle='-', alpha=0.3, linewidth=1)
    
    ax.set_title('Utilizaci√≥n de L√≠mites VG/VR (%)', fontweight='bold')
    ax.set_xlabel('Semana Global')
    ax.set_ylabel('Utilizaci√≥n (%)')
    ax.legend()
    ax.grid(True, alpha=0.3)
    ax.set_xticks([24, 72, 120, 168, 216])
    ax.set_xticklabels(['T1', 'T2', 'T3', 'T4', 'T5'])
    
    plt.tight_layout()
    plt.savefig(f'{carpeta_graficos}/2_extracciones_vs_limites.png', dpi=300, bbox_inches='tight')
    print(f"  ‚úÖ Guardado: {carpeta_graficos}/2_extracciones_vs_limites.png")
    plt.close()
    
    # =============================================================
    # GR√ÅFICO 3: AN√ÅLISIS DE RIEGO Y D√âFICITS
    # =============================================================
    
    print("üìà Generando Gr√°fico 3: An√°lisis de riego y d√©ficits...")
    
    fig, axes = plt.subplots(2, 2, figsize=(18, 12))
    axes = axes.flatten()
    
    # Preparar datos de riego
    riego = datos['riego'].copy()
    riego['Semana_Global'] = (riego['Temporada'] - 1) * 48 + riego['Semana']
    
    # Merge con l√≠mites VR
    riego_merged = pd.merge(riego, limites_plot[['Semana', 'Temporada', 'VR_limite']], 
                           on=['Semana', 'Temporada'], how='left')
    
    # Gr√°fico 3.1: D√©ficits por temporada
    ax = axes[0]
    deficit_por_temp = riego.groupby('Temporada')['Deficit_m3s'].sum()
    colores_temp = ['#3498db', '#e74c3c', '#f39c12', '#2ecc71', '#9b59b6']
    
    bars = ax.bar(deficit_por_temp.index, deficit_por_temp.values, 
                  color=colores_temp[:len(deficit_por_temp)], alpha=0.8)
    ax.set_title('D√©ficit Total de Riego por Temporada', fontweight='bold')
    ax.set_xlabel('Temporada')
    ax.set_ylabel('D√©ficit Total (m¬≥/s)')
    ax.grid(True, axis='y', alpha=0.3)
    
    # A√±adir valores sobre las barras
    for bar, val in zip(bars, deficit_por_temp.values):
        if val > 0:
            ax.text(bar.get_x() + bar.get_width()/2, bar.get_height() + val*0.01, 
                   f'{val:.1f}', ha='center', va='bottom', fontweight='bold')
    
    # Gr√°fico 3.2: Evoluci√≥n de d√©ficits vs l√≠mites VR
    ax = axes[1]
    
    # Solo mostrar semanas con d√©ficit > 0
    deficit_weeks = riego_merged[riego_merged['Deficit_m3s'] > 0.01]
    if len(deficit_weeks) > 0:
        scatter = ax.scatter(deficit_weeks['VR_limite'], deficit_weeks['Deficit_m3s'], 
                           c=deficit_weeks['Temporada'], cmap='viridis', 
                           s=50, alpha=0.7, edgecolors='black', linewidth=0.5)
        plt.colorbar(scatter, ax=ax, label='Temporada')
        
        ax.set_title('D√©ficits vs L√≠mites VR Disponibles', fontweight='bold')
        ax.set_xlabel('L√≠mite VR (hm¬≥)')
        ax.set_ylabel('D√©ficit (m¬≥/s)')
        ax.grid(True, alpha=0.3)
    else:
        ax.text(0.5, 0.5, 'No hay d√©ficits de riego\nen la optimizaci√≥n', 
               ha='center', va='center', transform=ax.transAxes, 
               fontsize=14, fontweight='bold', color='green')
        ax.set_title('An√°lisis de D√©ficits de Riego', fontweight='bold')
    
    # Gr√°fico 3.3: Provisi√≥n vs Demanda por canal (agregado)
    ax = axes[2]
    
    provision_canal = riego.groupby('Canal')['Provisto_m3s'].sum()
    demanda_canal = riego.groupby('Canal')['Demanda_m3s'].sum()
    
    x = np.arange(len(provision_canal))
    width = 0.35
    
    ax.bar(x - width/2, demanda_canal.values, width, label='Demanda', 
           color=COLORS['limite'], alpha=0.8)
    ax.bar(x + width/2, provision_canal.values, width, label='Provisi√≥n', 
           color=COLORS['VR'], alpha=0.8)
    
    ax.set_title('Demanda vs Provisi√≥n por Canal (Acumulado)', fontweight='bold')
    ax.set_xlabel('Canal')
    ax.set_ylabel('Caudal Acumulado (m¬≥/s)')
    ax.set_xticks(x)
    ax.set_xticklabels([f'Canal {i}' for i in provision_canal.index])
    ax.legend()
    ax.grid(True, axis='y', alpha=0.3)
    
    # Gr√°fico 3.4: Evoluci√≥n temporal demanda vs provisi√≥n (total)
    ax = axes[3]
    
    # Agrupar por semana global
    demanda_temporal = riego.groupby('Semana_Global')['Demanda_m3s'].sum()
    provision_temporal = riego.groupby('Semana_Global')['Provisto_m3s'].sum()
    
    ax.plot(demanda_temporal.index, demanda_temporal.values, 
           color=COLORS['limite'], linewidth=2, label='Demanda Total', linestyle='--')
    ax.plot(provision_temporal.index, provision_temporal.values, 
           color=COLORS['VR'], linewidth=2, label='Provisi√≥n Total')
    
    # Sombrear √°reas con d√©ficit
    deficit_temporal = demanda_temporal - provision_temporal
    deficit_areas = deficit_temporal > 0.01
    if deficit_areas.any():
        ax.fill_between(deficit_temporal.index, demanda_temporal.values, 
                       provision_temporal.values, where=deficit_areas,
                       alpha=0.3, color='red', label='D√©ficit')
    
    # Separadores de temporadas
    for t in range(1, 5):
        ax.axvline(x=t*48, color='gray', linestyle='-', alpha=0.3, linewidth=1)
    
    ax.set_title('Evoluci√≥n Temporal: Demanda vs Provisi√≥n Total', fontweight='bold')
    ax.set_xlabel('Semana Global')
    ax.set_ylabel('Caudal (m¬≥/s)')
    ax.legend()
    ax.grid(True, alpha=0.3)
    ax.set_xticks([24, 72, 120, 168, 216])
    ax.set_xticklabels(['T1', 'T2', 'T3', 'T4', 'T5'])
    
    plt.tight_layout()
    plt.savefig(f'{carpeta_graficos}/3_analisis_riego_deficits.png', dpi=300, bbox_inches='tight')
    print(f"  ‚úÖ Guardado: {carpeta_graficos}/3_analisis_riego_deficits.png")
    plt.close()
    
    # =============================================================
    # GR√ÅFICO 4: AN√ÅLISIS DE GENERACI√ìN EL√âCTRICA
    # =============================================================
    
    print("üìà Generando Gr√°fico 4: An√°lisis de generaci√≥n el√©ctrica...")
    
    fig, axes = plt.subplots(2, 2, figsize=(18, 12))
    axes = axes.flatten()
    
    # Preparar datos de energ√≠a
    energia = datos['energia'].copy()
    
    # Gr√°fico 4.1: Energ√≠a por temporada
    ax = axes[0]
    energia_temp = energia.groupby('Temporada')['Energia_GWh'].sum()
    
    bars = ax.bar(energia_temp.index, energia_temp.values, 
                  color=colores_temp[:len(energia_temp)], alpha=0.8)
    ax.set_title('Energ√≠a Generada por Temporada', fontweight='bold')
    ax.set_xlabel('Temporada')
    ax.set_ylabel('Energ√≠a (GWh)')
    ax.grid(True, axis='y', alpha=0.3)
    
    # A√±adir valores sobre las barras
    for bar, val in zip(bars, energia_temp.values):
        ax.text(bar.get_x() + bar.get_width()/2, bar.get_height() + val*0.01, 
               f'{val:.1f}', ha='center', va='bottom', fontweight='bold')
    
    # Gr√°fico 4.2: Top 8 centrales por energ√≠a total
    ax = axes[1]
    energia_central = energia.groupby('Central')['Energia_GWh'].sum().sort_values(ascending=False).head(8)
    
    # Usar nombres de centrales si est√°n disponibles
    nombres_display = []
    for central in energia_central.index:
        if central in nombres_centrales:
            nombres_display.append(f"{nombres_centrales[central][:15]}")
        else:
            nombres_display.append(f"Central {central}")
    
    bars = ax.barh(range(len(energia_central)), energia_central.values, color=COLORS['VG'], alpha=0.8)
    ax.set_title('Top 8 Centrales por Energ√≠a Generada', fontweight='bold')
    ax.set_xlabel('Energ√≠a Total (GWh)')
    ax.set_yticks(range(len(energia_central)))
    ax.set_yticklabels(nombres_display)
    ax.grid(True, axis='x', alpha=0.3)
    
    # A√±adir valores al final de las barras
    for i, (bar, val) in enumerate(zip(bars, energia_central.values)):
        ax.text(bar.get_width() + val*0.01, bar.get_y() + bar.get_height()/2, 
               f'{val:.1f}', ha='left', va='center', fontweight='bold')
    
    # Gr√°fico 4.3: Distribuci√≥n de generaci√≥n por central y temporada
    ax = axes[2]
    
    # Crear matriz para heatmap
    centrales_top = energia_central.head(6).index  # Top 6 para visualizaci√≥n
    matriz_energia = []
    temporadas = sorted(energia['Temporada'].unique())
    
    for central in centrales_top:
        fila = []
        for temp in temporadas:
            val = energia[(energia['Central'] == central) & 
                         (energia['Temporada'] == temp)]['Energia_GWh'].sum()
            fila.append(val)
        matriz_energia.append(fila)
    
    im = ax.imshow(matriz_energia, cmap='YlOrRd', aspect='auto')
    
    # Configurar etiquetas
    ax.set_xticks(range(len(temporadas)))
    ax.set_xticklabels([f'T{t}' for t in temporadas])
    ax.set_yticks(range(len(centrales_top)))
    ax.set_yticklabels([nombres_centrales.get(c, f'C{c}')[:15] for c in centrales_top])
    
    # A√±adir valores en las celdas
    for i in range(len(centrales_top)):
        for j in range(len(temporadas)):
            val = matriz_energia[i][j]
            color = 'white' if val > np.max(matriz_energia) * 0.5 else 'black'
            ax.text(j, i, f'{val:.1f}', ha='center', va='center', 
                   color=color, fontweight='bold', fontsize=9)
    
    ax.set_title('Energ√≠a por Central y Temporada (Top 6)', fontweight='bold')
    ax.set_xlabel('Temporada')
    
    # Colorbar
    cbar = plt.colorbar(im, ax=ax)
    cbar.set_label('Energ√≠a (GWh)')
    
    # Gr√°fico 4.4: Relaci√≥n VG l√≠mite vs Energ√≠a generada por temporada
    ax = axes[3]
    
    # Calcular VG l√≠mite promedio por temporada
    vg_limite_temp = df_limites.groupby('Temporada')['VG_limite'].mean()
    
    # Hacer scatter plot
    scatter = ax.scatter(vg_limite_temp.values, energia_temp.values, 
                        c=vg_limite_temp.index, cmap='viridis', s=100, 
                        alpha=0.8, edgecolors='black', linewidth=2)
    
    # A√±adir etiquetas de temporada
    for i, (vg, energia_val, temp) in enumerate(zip(vg_limite_temp.values, 
                                                   energia_temp.values, 
                                                   vg_limite_temp.index)):
        ax.annotate(f'T{temp}', (vg, energia_val), xytext=(5, 5), 
                   textcoords='offset points', fontweight='bold')
    
    ax.set_title('L√≠mite VG vs Energ√≠a Generada por Temporada', fontweight='bold')
    ax.set_xlabel('L√≠mite VG Promedio (hm¬≥)')
    ax.set_ylabel('Energ√≠a Total (GWh)')
    ax.grid(True, alpha=0.3)
    
    plt.tight_layout()
    plt.savefig(f'{carpeta_graficos}/4_analisis_generacion_electrica.png', dpi=300, bbox_inches='tight')
    print(f"  ‚úÖ Guardado: {carpeta_graficos}/4_analisis_generacion_electrica.png")
    plt.close()
    
    # =============================================================
    # RESUMEN DE ESTAD√çSTICAS
    # =============================================================
    
    print("\n" + "="*80)
    print("üìä RESUMEN DE ESTAD√çSTICAS")
    print("="*80)
    
    # Estad√≠sticas generales
    total_energia = energia['Energia_GWh'].sum()
    total_deficit = riego['Deficit_m3s'].sum()
    num_violaciones = len(datos['holguras']) if len(datos['holguras']) > 0 else 0
    
    print(f"\n‚ö° GENERACI√ìN:")
    print(f"   ‚Ä¢ Energ√≠a total generada: {total_energia:,.2f} GWh")
    print(f"   ‚Ä¢ Energ√≠a promedio/temporada: {total_energia/5:,.2f} GWh")
    
    print(f"\nüíß RIEGO:")
    print(f"   ‚Ä¢ D√©ficit total: {total_deficit:,.2f} m¬≥/s acumulado")
    print(f"   ‚Ä¢ Semanas con d√©ficit: {(riego['Deficit_m3s'] > 0.01).sum()}")
    
    print(f"\nüìä VOL√öMENES:")
    vol_inicial = datos['volumenes_lago']['Volumen_hm3'].iloc[0]
    vol_final = datos['volumenes_lago']['Volumen_hm3'].iloc[-1]
    vol_min = datos['volumenes_lago']['Volumen_hm3'].min()
    vol_max = datos['volumenes_lago']['Volumen_hm3'].max()
    
    print(f"   ‚Ä¢ Volumen inicial: {vol_inicial:,.2f} hm¬≥")
    print(f"   ‚Ä¢ Volumen final: {vol_final:,.2f} hm¬≥")
    print(f"   ‚Ä¢ Volumen m√≠nimo alcanzado: {vol_min:,.2f} hm¬≥")
    print(f"   ‚Ä¢ Volumen m√°ximo alcanzado: {vol_max:,.2f} hm¬≥")
    
    print(f"\nüö´ RESTRICCIONES:")
    print(f"   ‚Ä¢ Violaciones volumen m√≠nimo: {num_violaciones}")
    
    # Estad√≠sticas de l√≠mites VG/VR
    print(f"\nüìè L√çMITES VG/VR:")
    vg_promedio = df_limites['VG_limite'].mean()
    vr_promedio = df_limites['VR_limite'].mean()
    casos_limite_vg = (df_limites['VG_limite'] >= 1199).sum()
    
    print(f"   ‚Ä¢ VG l√≠mite promedio: {vg_promedio:,.2f} hm¬≥")
    print(f"   ‚Ä¢ VR l√≠mite promedio: {vr_promedio:,.2f} hm¬≥")
    print(f"   ‚Ä¢ Casos donde VG alcanza l√≠mite 1200: {casos_limite_vg}")
    
    print(f"\nüìÅ ARCHIVOS GENERADOS:")
    print(f"   ‚Ä¢ Carpeta: {carpeta_graficos}/")
    print("   ‚Ä¢ 4 gr√°ficos principales de an√°lisis")
    print("   ‚Ä¢ An√°lisis completo de optimizaci√≥n con VG/VR por tramos")
    
    print("\n" + "="*80)
    print("‚úÖ VISUALIZACI√ìN DE OPTIMIZACI√ìN COMPLETADA")
    print("="*80)

def crear_datos_demo():
    """
    Crea datos de demostraci√≥n para mostrar el funcionamiento del visualizador
    cuando no hay resultados reales de optimizaci√≥n disponibles
    """
    print("\nüîß MODO DEMOSTRACI√ìN - Generando datos sint√©ticos...")
    
    carpeta_demo = "resultados_demo"
    os.makedirs(carpeta_demo, exist_ok=True)
    
    # Par√°metros de la demo
    temporadas = [1, 2, 3, 4, 5]
    semanas = list(range(1, 49))  # 48 semanas
    
    # 1. Vol√∫menes del lago (simulados)
    np.random.seed(42)  # Para reproducibilidad
    volumenes_lago = []
    
    for t in temporadas:
        vol_inicial = 4500 + np.random.normal(0, 500)  # Volumen inicial por temporada
        for w in semanas:
            # Variaci√≥n semanal realista
            variacion = np.sin((w-1) * 2 * np.pi / 48) * 300 + np.random.normal(0, 100)
            volumen = max(1400, vol_inicial + variacion)  # No bajar de V_min
            volumenes_lago.append({
                'Semana': w,
                'Temporada': t,
                'Volumen_hm3': volumen
            })
    
    pd.DataFrame(volumenes_lago).to_csv(f"{carpeta_demo}/volumenes_lago.csv", index=False)
    
    # 2. Vol√∫menes por uso
    volumenes_uso = []
    for t in temporadas:
        for w in semanas:
            # VG y VR simulados basados en reglas por tramos
            V_base = 4000 + np.random.normal(0, 800)
            
            if V_base <= 1200:
                VG = 0.05 * V_base + 20
                VR = 570 + 10
            elif V_base <= 1370:
                VG = min(60 + 0.05 * (V_base - 1200), 1200)
                VR = 600 + 0.40 * (V_base - 1200)
            else:
                VG = min(68.5 + 0.40 * (V_base - 1370), 1200)
                VR = 668 + 0.40 * (V_base - 1370)
            
            volumenes_uso.append({'Semana': w, 'Temporada': t, 'Uso': 1, 'Volumen_hm3': VR})
            volumenes_uso.append({'Semana': w, 'Temporada': t, 'Uso': 2, 'Volumen_hm3': VG})
    
    pd.DataFrame(volumenes_uso).to_csv(f"{carpeta_demo}/volumenes_por_uso.csv", index=False)
    
    # 3. Extracciones por uso
    extracciones = []
    for t in temporadas:
        for w in semanas:
            # Extracciones como fracci√≥n de los vol√∫menes disponibles
            factor_uso = 0.3 + np.random.uniform(0, 0.4)  # 30-70% de uso
            
            VG_disp = volumenes_uso[(t-1)*48*2 + (w-1)*2 + 1]['Volumen_hm3']  # Aproximado
            VR_disp = volumenes_uso[(t-1)*48*2 + (w-1)*2]['Volumen_hm3']
            
            ext_gen = VG_disp * factor_uso * 0.1  # Conversi√≥n a m¬≥/s aproximada
            ext_riego = VR_disp * factor_uso * 0.08
            
            extracciones.append({'Semana': w, 'Temporada': t, 'Uso': 1, 'Caudal_m3s': ext_riego})
            extracciones.append({'Semana': w, 'Temporada': t, 'Uso': 2, 'Caudal_m3s': ext_gen})
    
    pd.DataFrame(extracciones).to_csv(f"{carpeta_demo}/extracciones_por_uso.csv", index=False)
    
    # 4. Datos de riego
    riego = []
    canales = [1, 2, 3, 4]
    demandantes = [1, 2, 3]
    
    for t in temporadas:
        for w in semanas:
            for j in canales:
                for d in demandantes:
                    # Saltar combinaciones no v√°lidas
                    if (j == 3 and d in [1, 2]) or (j == 4 and d in [2, 3]):
                        continue
                        
                    demanda = 5 + np.random.uniform(0, 10)  # 5-15 m¬≥/s
                    provisto = min(demanda, demanda * (0.8 + np.random.uniform(0, 0.2)))
                    deficit = max(0, demanda - provisto)
                    
                    riego.append({
                        'Semana': w, 'Temporada': t, 'Canal': j, 'Demanda': d,
                        'Demanda_m3s': demanda, 'Provisto_m3s': provisto, 
                        'Deficit_m3s': deficit, 'Incumplimiento': 1 if deficit > 0.1 else 0
                    })
    
    pd.DataFrame(riego).to_csv(f"{carpeta_demo}/riego.csv", index=False)
    
    # 5. Energ√≠a generada
    energia = []
    centrales = list(range(1, 17))  # 16 centrales
    
    for t in temporadas:
        for i in centrales:
            # Energ√≠a basada en rendimiento simulado
            if i <= 10:  # Primeras 10 centrales m√°s activas
                energia_base = 20 + np.random.uniform(0, 50)
            else:
                energia_base = np.random.uniform(0, 15)
                
            energia.append({
                'Central': i,
                'Temporada': t,
                'Energia_GWh': energia_base
            })
    
    pd.DataFrame(energia).to_csv(f"{carpeta_demo}/energia_total.csv", index=False)
    
    # 6. Generaci√≥n por central/semana (simplificado)
    generacion = []
    for t in temporadas:
        for w in semanas:
            for i in centrales[:8]:  # Solo primeras 8 centrales
                caudal = np.random.uniform(0, 100)
                generacion.append({
                    'Semana': w, 'Temporada': t, 'Central': i, 'Caudal_m3s': caudal
                })
    
    pd.DataFrame(generacion).to_csv(f"{carpeta_demo}/generacion.csv", index=False)
    
    print(f"‚úÖ Datos de demostraci√≥n creados en: {carpeta_demo}/")
    return carpeta_demo

def main():
    """Funci√≥n principal"""
    carpeta_resultados = "resultados_caso_base"
    
    # Verificar si existen resultados reales
    encontrados, faltantes = verificar_carpeta_resultados(carpeta_resultados)
    
    if len(faltantes) > 3:  # Si faltan muchos archivos
        print("\n" + "="*80)
        print("‚ö†Ô∏è  ARCHIVOS DE OPTIMIZACI√ìN NO ENCONTRADOS")
        print("="*80)
        print(f"Archivos faltantes: {faltantes}")
        print("\nüîß Ejecutando modo demostraci√≥n con datos sint√©ticos...")
        
        carpeta_resultados = crear_datos_demo()
    
    # Ejecutar visualizador
    crear_visualizador_optimizacion(
        carpeta_resultados=carpeta_resultados,
        carpeta_graficos=f"graficos_optimizacion_{carpeta_resultados.split('_')[-1]}"
    )

if __name__ == "__main__":
    main()